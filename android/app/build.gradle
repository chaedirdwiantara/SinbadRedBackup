apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

project.ext.react = [
    enableHermes: true,
]
apply from: '../../node_modules/react-native/react.gradle'

def enableSeparateBuildPerCPUArchitecture = true
def enableProguardInReleaseBuilds = true
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get('enableHermes', false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'sinbad.app.development'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName '1.0'
        missingDimensionStrategy 'react-native-camera', 'general', 'mlkit'
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
			storePassword MYAPP_RELEASE_STORE_PASSWORD
			keyAlias MYAPP_RELEASE_KEY_ALIAS
			keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
    }
}

dependencies {
    // FOR ANDROID
    // implementation 'com.google.android.gms:play-services-base:17.6.0'
    // implementation 'com.google.android.gms:play-services-location:18.0.0'
    // implementation 'com.google.android.gms:play-services-maps:17.0.1'
    // INTERNAL REACT NATIVE
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.facebook.react:react-native:0.64.0'
    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    // MULTIDEX
    implementation 'androidx.multidex:multidex:2.0.1'
    // REACT NATIVE LIBRARY
    implementation project(':react-native-camera')
    implementation project(':@react-native-firebase_messaging')
    implementation project(':@react-native-firebase_firestore')
    implementation project(':@react-native-firebase_database')
    implementation project(':react-native-push-notification')
    // DEBUG FLIPPER
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    // CHECK FOR HERMES
    if (enableHermes) {
        def hermesPath = '../../node_modules/hermes-engine/android/';
        debugImplementation files(hermesPath + 'hermes-debug.aar')
        releaseImplementation files(hermesPath + 'hermes-release.aar')
    } else {
        implementation jscFlavor
    }
}

task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

task printVersionCode {
    doLast {
        println android.defaultConfig.versionCode
    }
}

task printApplicationId {
    doLast {
        println android.defaultConfig.applicationId
    }
}

apply from: file('../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle'); applyNativeModulesAppBuildGradle(project)
